Here are some important information about this project:

*) The project is developed using Eclipse IDE and .project and .classpath files are checked into SVN. Therefore compiling and running the project under Eclipse is straightforward.

*) The project is automatically built by Plectix's integration server each time any project file is committed to SVN. It is also deployed to the test server. Therefore all developers need to make sure the whole build process is fine before checking in any code. The integration server runs "ant all" command, so compiling/running the project under Eclipse is not enough.

*) Javadocs are also automatically built by the integration server so they are updated each time any project file is committed to SVN. Everyone in Plectix has access to them at https://integration.plectix.com/hudson/job/jsim/javadoc/index.html

*) The source folders are src/main and src/test. The source folder src/main should be self contained. In other words, no class under src/main should depend on a class under src/test. The classes under src/test are test classes and their utility classes which are not used by src/main.

*) The file paths must be specified with caution. Plectix uses Mac OS X on its desktops and Linux OS on its servers (Windows is not the only OS in the world!). Java provides File.separatorChar character which should be used instead of '/' or '\'. 

*) Constants should be declared as "public static final ..." at the top of a class and never inside methods. E.g. it is bad practice to hard code any specific paths. They must be declared as "public static final String" at the top of their respective classes.

*) Catch blocks should never be left empty. 

*) The project uses PlxLogger class for logging. Therefore, developers should refrain from writing to stdout or stderr, especially from classes under src/main. 

This class wraps log4j's Logger class. The recommended usage is as follows: Define a STATIC member at the top of your class, e.g. in the Simulator class we have:

    private static final PlxLogger LOGGER = ThreadLocalData.getLogger(Simulator.class);

and then check the debug level before output call. For example, for debugging:

    if (LOGGER.isDebugEnabled()) {
       LOGGER.debug("Rule: " + rule.getName());
    }
    
Logging is configured automatically in the main simulation. To configure it in a test class, use the static SimulationMain.initializeLogging() call.

*) The file and folder names should not include the following characters: " &\/`'!$^*()[]<>?" (the first one is white space).
