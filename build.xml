<?xml version="1.0" encoding="UTF-8"?>

<project name="simulator" basedir="." default="build">

	<!-- ################################### Definitions ################################### -->
    <property environment="env"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.6"/>
    <property name="source" value="1.6"/>

	<property name="build.dir"  value="tmp/ant"/>
	<property name="lib.dir" value="lib"/>
	<property name="src.dir" value="src/main"/>
	<property name="test.dir" value="src/test"/>
	<property name="resources.dir" value="resources"/>
	<property name="dist.dir" value="jar"/>
	<property name="javadoc.dir" value="javadoc"/>
	<property name="deploy.dir" value="deploy"/>

	<fileset id="external.jars" dir="${lib.dir}">
        <include name="xstream/xstream-1.3.jar"/>
        <include name="xstream/xpp3_min-1.1.4c.jar"/>
        <include name="commons-logging/commons-logging-1.1.1.jar"/>
        <include name="log4j/log4j-1.2.15.jar"/>
        <include name="commons-cli/commons-cli-1.1.jar"/>
	</fileset>

	<fileset id="test.jars" dir="${lib.dir}">
		<!-- Put here all jars that are needed for running tests -->
   	</fileset>

	<path id="simulator.classpath">
		<pathelement path="${build.dir}"/>
		<fileset refid="external.jars"/>
	</path>
	
	<!-- ################################### Misc Targets ################################### -->

<!-- depends="clean,build,package,doc,test" -->
    <target name="all" 
	        description="Cleanly build, package and test everything (does not update database)"/>

    <target name="clean" description="Clean up build directories">
        <delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>
    </target>

    <target name="cleanall" depends="clean">
		<delete dir="${javadoc.dir}"/>
		<delete dir="${deploy.dir}"/>
	</target>
 
	<target name="build" depends="build-subprojects,build-project"/>
    
	<target name="build-subprojects"/>
     
    <target name="init">
        <mkdir dir="${build.dir}"/>
        <copy includeemptydirs="false" todir="${build.dir}">
            <fileset dir="${src.dir}" excludes="**/*.launch, **/*.java"/>
        </copy>
    </target>

	<target name="build-project" depends="init" description="Building project">
        <echo message="OS: ${os.name} "/>
        <echo message="Java: ${ant.java.version} "/>
        <echo message="${ant.project.name}: ${ant.file} "/>
        <javac srcdir="${src.dir}" destdir="${build.dir}" debug="true" failonerror="true">
            <classpath refid="simulator.classpath"/>
        </javac>
    </target>
		
	<target name="package" depends="build-project" description="Create JAR file">
		<mkdir dir="${dist.dir}"/>
		<jar jarfile="${dist.dir}/simulator.jar" compress="false">
			<fileset dir="${build.dir}">
				<include name="com/**"/>
			</fileset>
		</jar>
	</target>
	
	<target name="deploy" depends="build-project,package,createPaths" description="Deploying the package">
		<mkdir dir="${deploy.dir}"/>
		<tstamp/>
		<property name="deploy-dest" value="Plectix-Simulator-${DSTAMP}"/>
		<property name="deploy-zip.dir" value="${deploy.dir}/${deploy-dest}"/>
		<delete dir="${deploy-zip.dir}"/>
		<copy todir="${deploy-zip.dir}">
			<fileset dir=".">				
				<include name="config/log4j.properties"/>
				<include name="${dist.dir}/simulator.jar"/>
				<exclude name="**/.svn"/>
			</fileset>
		</copy>
		<copy todir="${deploy-zip.dir}/${lib.dir}">
			<fileset refid="external.jars"/>
		</copy>
		
		<copy todir="${deploy-zip.dir}" file="run/Simulator.bat"/>
		<copy todir="${deploy-zip.dir}" file="run/Simulator.sh"/>
		<replaceregexp>
			<regexp pattern="\$\{export.classpath.unix}"/>
			<substitution expression="${export.classpath.unix}"/>
			<fileset dir="${deploy-zip.dir}" includes="*.sh"/>
		</replaceregexp>		
		<replaceregexp>
			<regexp pattern="\$\{export.classpath.windows}"/>
			<substitution expression="${export.classpath.windows}"/>
			<fileset dir="${deploy-zip.dir}" includes="*.bat,*.lap"/>
		</replaceregexp>
		<fixcrlf srcdir="${deploy-zip.dir}" eol="lf" eof="remove" includes="*.sh"/>

		<mkdir dir="${deploy-zip.dir}/logs"/>
		<touch file="${deploy-zip.dir}/logs/simulator.log"/>
		
		<!-- Make Windows zip file, including JRE -->
		<zip destfile="${deploy.dir}/${deploy-dest}.zip">
			<zipfileset dir="${deploy-zip.dir}" includes="**" prefix="${deploy-dest}"/>
		</zip>
	</target>

	<target name="test" description="Run JUnit tests">
		<echo message="Running tests"/>
		<java classname="com.plectix.simulator.test.AllTests" fork="true" failonerror="true" classpathref="simulator.classpath">
		</java>
		<echo message="Tests complete - check log for errors"/>
	</target>
	
	<target name="SimulationMain">
        <java classname="com.plectix.simulator.SimulationMain" failonerror="true" fork="yes">
            <arg line="--sim data/Example.ka --time 10"/>
            <classpath refid="simulator.classpath"/>
        </java>
    </target>
		
	<target name="createPaths">
		
		<!-- Define properties for the full paths to the lib and jar directories,
		     so we can replace them below with the relative paths -->
		<property name="lib-location" location="lib"/>
		<property name="jar-location" location="jar"/>
	
		<path id="export.classpath">
			<pathelement path="${dist.dir}/simulator.jar"/>
			<fileset refid="external.jars"/>
		</path>
		<pathconvert refid="export.classpath" targetos="unix" property="export.classpath.unix">
			<map from="${lib-location}" to="lib"/>
			<map from="${jar-location}" to="jar"/>
		</pathconvert>
		<pathconvert refid="export.classpath" pathsep=";" dirsep="/" property="export.classpath.windows">
			<map from="${lib-location}" to="lib"/>
			<map from="${jar-location}" to="jar"/>
		</pathconvert>
	</target>
		
	<target name="showPaths" depends="createPaths">
		<echo message="The value of export.classpath.windows is ${export.classpath.windows}"/>
		<echo message="The value of export.classpath.unix is ${export.classpath.unix}"/>
	</target>

  <!-- Set version -->
    <target name="set-version">
	    <property name="svn.info" value="svn.info" />

        <!-- Get last SVN revision. -->
        <exec executable="svn" output="${svn.info}">
             <arg value="info" />
             <arg value="--revision=HEAD" />
             <arg value="--xml" />
        </exec>

        <!-- Query revision. -->
		<!--
        <xpath file="${svn.info}"
             expression="//entry/@revision"
             outputproperty="build.revision" />
			 -->

        <!-- Delete temp revision file. -->
		<!--
        <delete file="${svn.info}" />
		-->

        <!-- Show version -->
        <echo message="SVN revision ${build.reversion}" />
    </target>

</project>
